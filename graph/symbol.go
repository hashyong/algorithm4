package graph

import (
	"encoding/json"
	"io/ioutil"
)

// SymbolGraph 符号图, 顶点存的是有意义的内容
type SymbolGraph struct {
	st   map[string]int
	keys []string
	G    Interface
}

func (g SymbolGraph) Init(data string) {
	// https://mholt.github.io/json-to-go/
	type Autogenerated struct {
		Edge []struct {
			S string `json:"s"`
			E string `json:"e"`
		} `json:"edge"`
	}

	// 读取标准输入数据
	content, err := ioutil.ReadFile(data)
	if err != nil {
		return
	}

	// json 转换
	var d Autogenerated
	err = json.Unmarshal(content, &d)
	if err != nil {
		return
	}

	// 构造数据
	for _, data := range d.Edge {
		_, ok := g.st[data.S]
		if !ok {
			g.st[data.S] = len(g.st)
		}
	}

	// 构造反向索引
	g.keys = make([]string, len(g.st))
	for name := range g.st {
		g.keys[g.st[name]] = name
	}

	// 构造图
	g.G = New().Graph(len(g.keys))
	for _, data := range d.Edge {
		g.G.AddEdge(g.st[data.S], g.st[data.E])
	}
}

func (g SymbolGraph) Contains(s string) bool {
	_, ok := g.st[s]
	return ok
}

func (g SymbolGraph) Index(s string) int {
	return g.st[s]
}

func (g SymbolGraph) Name(v int) string {
	return g.keys[v]
}

func (g SymbolGraph) Graph() Interface {
	return g.G
}
